import { Component, HostListener, OnInit } from '@angular/core';
import { UrlService } from '../url.service';

@Component({
  selector: 'app-covid-cases',
  templateUrl: './covid-cases.component.html',
  styleUrls: ['./covid-cases.component.scss']
})
export class CovidCasesComponent implements OnInit {
  // static descriptions
  descriptions = {
    part1: {
      title: 'New Covid Cases Prediction',
      description: `This dataset consists of covid cases from all the states in India from January 30th
      2020 to July 7th 2021. If there is a missing entry from a state in any given day it means there is
      no new information from that state on that day. This dataset provides information related to the Cured,
      Deaths, and Confirmed cases. This dataset consists of 525 unique days and 16849 records.`,
      datasetInfo: 'This dataset is downloaded from Kaggle and provided by SRK and 2 others.',
      link: 'https://www.kaggle.com/sudalairajkumar/covid19-in-india'
    },
    part2 : {
      title: 'About the Analysis',
      process: `Firstly, the dataset is grouped by date as a result, we can get cases on whole country
      rather than a single state. Then "Active cases" column is generated by subtracting cured and deaths
      from the confirmed cases. After that "New Cases" column is generated by subtracting confirmed cases
      from it's previous value.`,
      scaling: `Since the number of cases were wide spread from 0 to 414188 scaling is a good idea to avoid
      any imbalance. So, standard Z scalar is applied`,
      splitting: `We have a total of 525 cases of which 425 is allocated for training and the other 100 are allocated
      for testing. In order to feed a Time Series model we need to tailor the data in specific format. Train data is
      reshaped in the form of (30 x 395 x 1) and test data in the form of (30 x 70 x 1).`,
      model: `A stacked LSTM model is created with three LSTM's and then a Dense layer is added to fine tune the model.
      After that the model is trained for 200 epochs and it ended with a loss of 0.0034 and validation loss of 0.7855.`,
      future: `Future data is predicted using the last 30 days and this future date value is used to predict next day
      and so on it continues for 30 times.`,
      link: 'https://github.com/bhanupalagati/MLProjects/blob/main/Covid_19_india/lstmModel.ipynb'
    },
    part3: {
      title: 'About the graph',
      graphTitle: 'Time Series Line Graph Representation',
      xaxis: `The numbering you that you observe on the x-axis is the days span from 30th January 2020 to July 7th 2021. In order to avoid cluttering with
      multiple large values we are using equivalent day indices. y-axis shows the number of cases registered on the given day.`,
      graph: `The graph is interactive and one can learn more about the points by hovering. Moreover, we can increase or
      reduce the render area using the bar below the graph. Please use these features for better understanding.`,
      desc: `New cases indicate all the new cases that was registered on a given day. Training represents the predicted
      values of new cases for the given day which are used for training. Testing represents the prediction of new cases which
      are not used in training to measure the performance. Future represents the actual use case scenario where we will predict
      the new cases for next 30 days and make ourselves prepared for the action.`
    }
  }
  // Graph options
  legend: boolean = true;
  showLabels: boolean = true;
  animations: boolean = true;
  xAxis: boolean = true;
  yAxis: boolean = true;
  showYAxisLabel: boolean = true;
  showXAxisLabel: boolean = true;
  xAxisLabel: string = 'NO.of Days';
  yAxisLabel: string = 'covid cases';
  timeline: boolean = true;
  multi: any[];
  view: any[] = [1000, 300];
  colorScheme = {
    domain: ['#f5aae6', '#E44D25', '#5AA454', '#aae3f5']
  };
  dataLoading = true;

  constructor(private urlService: UrlService) { }
  covidAnalytics;
  ngOnInit(): void {
    this.showData();
    this.resizeAction(window.innerWidth);
  }

  resizeAction(width) {
    this.view[0] = width < 500 ? width - 60 : width - 100
  }

  @HostListener('window:resize', ['$event'])
  onResize(event) {
    this.resizeAction(window.innerWidth);
  }

  showData() {
    return this.urlService.getCovidData().subscribe(res => {
      // [activecases, newcases, training, testing, future]
      this.covidAnalytics = res['result'];
      this.multi = [
        {
          name: 'new cases',
          series: []
        },
        {
          name: 'training',
          series: []
        },
        {
          name: 'testing',
          series: []
        },
        {
          name: 'future',
          series: []
        }];
      this.feedData();
      })
  }

  feedData() {
    this.foreachBoilerplate(this.covidAnalytics.newcases, 0);
    this.foreachBoilerplate(this.covidAnalytics.training, 1);
    this.foreachBoilerplate(this.covidAnalytics.testing, 2);
    this.foreachBoilerplate(this.covidAnalytics.future, 3);
    this.dataLoading = false;
  }

  foreachBoilerplate(list, seriesInd) {
    list.forEach((element, index) => {
      if (element) {
        this.multi[seriesInd].series.push({name: index+1, value: element})
      }
    });
  }

}
